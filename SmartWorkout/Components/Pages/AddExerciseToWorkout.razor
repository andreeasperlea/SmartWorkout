@page "/addExerciseToWorkout"
@page "/addExerciseToWorkout/{redirectedWorkoutId:int}"
@using SmartWorkout.DataAccess
@using SmartWorkout.DataAccess.Entities
@using SmartWorkout.DataAccess.IRepository
@inject IGenericRepository<Client> ClientRepo;
@inject IGenericRepository<Workout> WorkoutRepo;
@inject IGenericRepository<Exercise> ExerciseRepo;


<EditForm FormName="Add Exercise" OnValidSubmit="SubmitFormExercise" Model="newExercise" class="">

	<div class="form-group mb-3">
		<label for="workout" class="col-sm-2 col-form-label">
			Choose a Workout:
		</label>
		<br />
		<InputSelect id="Workout" class="form-control" @bind-Value="selectedWorkoutId">
			@foreach (Workout w in Workouts)
			{
				<option value="@w.Id">@w.Id</option>
			}
		</InputSelect>
	</div>

	<div class="form-group mb-3">
		<label for="date">Date</label>
		<br />
		<InputDate class="form-control" @bind-Value="@newWorkout.Date"></InputDate>
	</div>

	<DataAnnotationsValidator />
	<div class="form-group mb-3">
		<label for="exercise" class="col-sm-2 col-form-label">
			Choose an Exercise:
		</label>
		<br />
		<InputSelect class="form-control" id="Exercise" @bind-Value="newExercise.Id">
			@foreach (Exercise e in Exercises)
			{
				<option value="@e.Id">@e.Name</option>
			}
		</InputSelect>
	</div>

	<div class="form-group mb-3">
		<label for="first-name">Weights(leave empty if you didn't use any)</label>
		<br />
		<InputNumber class="form-control" @bind-Value="@newExerciseLog.Weight"></InputNumber>
	</div>
	<div class="form-group mb-3">
		<label for="first-name">Sets</label>
		<br />
		<InputNumber class="form-control" @bind-Value="@newExerciseLog.Sets"></InputNumber>
	</div>
	<div class="form-group mb-3">
		<label for="first-name">Duration(in minutes)</label>
		<br />
		<InputNumber class="form-control" @bind-Value="@newExerciseLog.Duration"></InputNumber>
	</div>
	<div class="form-group mb-3">
		<label for="first-name">Distance in km(leave empty if it's not the case)</label>
		<br />
		<InputNumber class="form-control" @bind-Value="@newExerciseLog.Distance"></InputNumber>
	</div>
	<button type="submit" class="btn btn-primary">Submit</button>
	@if (savedExercise)
	{
		<p>The exercise has been added to workout!</p>
	}
	@if (errorExercise)
	{
		<p>Something went wrong, please try again.</p>
	}
</EditForm>


@inject DataAccess.SmartWorkoutContext SmartWorkoutContext;


@code {
	[Parameter]
	public int redirectedWorkoutId { get; set; } = -1;

	int selectedWorkoutId = new();
	List<Workout> Workouts = new();
	List<Exercise> Exercises = new();
	//private DataAccess.Entities.Exercise[] Exercise;
	List<Client> Clients = new();
	private DataAccess.Entities.Client[] Users;
	public SmartWorkout.DataAccess.Entities.Workout newWorkout = new Workout();
	public ExerciseLog newExerciseLog = new ExerciseLog();
	public Exercise newExercise = new Exercise();
	public bool savedExercise = false;
	public bool errorExercise = false;
	protected override async Task OnInitializedAsync()
	{
		Users = ClientRepo.GetAll().ToArray();
		Clients = Users.ToList();
		Exercises = ExerciseRepo.GetAll().ToList();
		Workouts = WorkoutRepo.GetAll().ToList();

		if (redirectedWorkoutId != -1)
		{
			selectedWorkoutId = redirectedWorkoutId;
		}

	}
	private async Task SubmitFormExercise()
	{
		savedExercise = false;
		errorExercise = false;
		try
		{
			Workout selectedWorkout = Workouts.First(w => w.Id == selectedWorkoutId);
			selectedWorkout.Duration += Convert.ToInt32(newExerciseLog.Duration);
			WorkoutRepo.Update(selectedWorkout);

			newExerciseLog.ExerciseId = newExercise.Id;
			newExerciseLog.WorkoutId = selectedWorkoutId;
			SmartWorkoutContext.ExerciseLogs.Add(newExerciseLog);
			await SmartWorkoutContext.SaveChangesAsync();

			newWorkout = new Workout();
			newExercise = new Exercise();
			newExerciseLog = new ExerciseLog();


			savedExercise = true;

		}
		catch (Exception)
		{
			errorExercise = true;
			throw;
		}
	}

}
