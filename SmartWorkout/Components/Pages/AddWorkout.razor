@page "/createWorkout"
@using SmartWorkout.DataAccess
@using SmartWorkout.DataAccess.Entities
@using SmartWorkout.DataAccess.IRepository
@inject IGenericRepository<Client> ClientRepo;
@inject IGenericRepository<Workout> WorkoutRepo;
@inject IGenericRepository<Exercise> ExerciseRepo;


<EditForm FormName="Add Workout" OnValidSubmit="SubmitFormWorkout" Model="newWorkout" class="">
	<label for="clients" class="col-sm-2 col-form-label">
		Choose a Client:
	</label>
	<InputSelect id="Client" @bind-Value="newWorkout.ClientId">
		@foreach (Client c in Clients)
		{
			<option value="@c.Id">@c.Name @c.Surname</option>
		}
	</InputSelect>
		

	<div class="form-group mb-3">
		<label for="date">Date</label>
		<InputDate @bind-Value="@newWorkout.Date"></InputDate>
	</div>

			<DataAnnotationsValidator />
	<label for="exercise" class="col-sm-2 col-form-label">
		Choose an Exercise:
	</label>
	<InputSelect id="Exercise" @bind-Value="newExercise.Id">
		@foreach (Exercise e in Exercises)
		{
			<option value="@e.Id">@e.Name</option>
		}
	</InputSelect>

		<div class="form-group mb-3">
			<label for="first-name">Weights(leave empty if you didn't use any)</label>
			<InputNumber @bind-Value="@newExerciseLog.Weight"></InputNumber>
		</div>
		<div class="form-group mb-3">
			<label for="first-name">Sets</label>
			<InputNumber @bind-Value="@newExerciseLog.Sets"></InputNumber>
		</div>
		<div class="form-group mb-3">
			<label for="first-name">Duration(in minutes)</label>
			<InputNumber @bind-Value="@newExerciseLog.Duration"></InputNumber>
		</div>
		<div class="form-group mb-3">
			<label for="first-name">Distance in km(leave empty if it's not the case)</label>
			<InputNumber @bind-Value="@newExerciseLog.Distance"></InputNumber>
		</div>
		<button type="submit" class="btn btn-primary">Submit</button>
		</EditForm>


@inject DataAccess.SmartWorkoutContext SmartWorkoutContext;


@code {
	List<Exercise> Exercises = new();
	//private DataAccess.Entities.Exercise[] Exercise;
	List<Client> Clients = new();
	private DataAccess.Entities.Client[] Users;
	public SmartWorkout.DataAccess.Entities.Workout newWorkout = new Workout();
	public ExerciseLog newExerciseLog = new ExerciseLog();
	public Exercise newExercise = new Exercise();
	public bool savedWorkout = false;
	public bool errorWorkout = false;
	protected override async Task OnInitializedAsync()
	{
		Users = ClientRepo.GetAll().ToArray();
		Clients = Users.ToList();
		Exercises = ExerciseRepo.GetAll().ToList();

	}
	private async Task SubmitFormWorkout()
	{
		savedWorkout = false;
		errorWorkout = false;
		try
		{
			newWorkout.Duration = Convert.ToInt32(newExerciseLog.Duration);
			SmartWorkoutContext.Workouts.Add(newWorkout);
			await SmartWorkoutContext.SaveChangesAsync();

			newExerciseLog.ExerciseId = newExercise.Id;
			newExerciseLog.WorkoutId = newWorkout.Id;
			SmartWorkoutContext.ExerciseLogs.Add(newExerciseLog);
			await SmartWorkoutContext.SaveChangesAsync();

			newWorkout = new Workout();
			newExercise = new Exercise();
			newExerciseLog = new ExerciseLog();


			savedWorkout = true;

		}
		catch (Exception)
		{
			errorWorkout = true;
			throw;
		}
	}

}