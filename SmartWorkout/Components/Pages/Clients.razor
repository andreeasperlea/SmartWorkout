@page "/clients"
@using Microsoft.AspNetCore.Mvc
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using SmartWorkout.Components.Shared
@using SmartWorkout.DataAccess
@using SmartWorkout.DataAccess.Entities
@using SmartWorkout.DataAccess.IRepository
@using SmartWorkout.DataAccess.Repository

@inject IGenericRepository<Client> ClientRepo;
<h3>Clients</h3>
@if(Users==null){
	<p><em>Loading...</em></p>
}
else
{
	<div class="w-100">
		<Search OnSearch="UpdateFilteredUsers"/>
	</div>
	
	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>Name</th>
				<th>Surname</th>
				<th>Email</th>
				<th>Phone</th>
				<th>Weight</th>
				<th>Age</th>
			</tr>
		</thead>
		<tbody>
			@foreach (Client c in filteredUsers)
			{
				if (c.Id == editingUser?.Id)
				{
					<tr>
						<td>@c.Id</td>
						<td><InputText @bind-Value="editingUser.Name" class="form-control" /></td>
						<td><InputText @bind-Value="editingUser.Surname" class="form-control" /></td>
						<td><InputText @bind-Value="editingUser.Email" class="form-control" /></td>
						<td><InputText @bind-Value="editingUser.Phone" class="form-control" /></td>
						<td><InputNumber @bind-Value="editingUser.Weight" class="form-control" /></td>
						<td><InputNumber @bind-Value="editingUser.Age" class="form-control" /></td>
						<td>
							<button class="btn btn-primary" @onclick="() => SaveUser(c.Id)">Save</button>
							<button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
						</td>
					</tr>
				}else{
					<tr>
						<td>@c.Id</td>
						<td>@c.Name</td>
						<td>@c.Surname</td>
						<td>@c.Email</td>
						<td>@c.Phone</td>
						<td>@c.Weight</td>
						<td>@c.Age</td>
						<td>
							<button class="btn btn-primary" @onclick="() => EditUser(c)">Edit</button>
							<button class="btn btn-danger" @onclick="() => DeleteUser(c.Id)">Delete</button>
						</td>
					</tr>
				}
			}
		</tbody>
	</table>

}
@code {
	List<Client> filteredUsers = new();
	private DataAccess.Entities.Client[] Users;
	private Client editingUser = null;
	protected override async Task OnInitializedAsync()
	{
		Users = ClientRepo.GetAll().ToArray();
		filteredUsers = Users.ToList();
	}

	void UpdateFilteredUsers(string SearchTerm)
	{
		if (string.IsNullOrEmpty(SearchTerm))
		{
			filteredUsers = Users.ToList();
		}
		else
		{
			filteredUsers = Users.Where(Users => 
				Users.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
				Users.Surname.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)
			).ToList();
		}
	}

	async Task DeleteUser(int id)
	{
		var user = Users.FirstOrDefault(u => u.Id == id);
		if (user != null)
		{
			ClientRepo.Remove(id);

			Users = ClientRepo.GetAll().ToArray();
			UpdateFilteredUsers(string.Empty);
		}
	}
	void EditUser(Client client)
	{
		editingUser = new Client
			{
				Id = client.Id,
				Name = client.Name,
				Surname = client.Surname,
				Email = client.Email,
				Phone = client.Phone,
				Weight = client.Weight,
				Age = client.Age
			};
	}

	void CancelEdit()
	{
		editingUser = null;
	}
	async Task SaveUser(int id)
	{
		var user = Users.FirstOrDefault(u => u.Id == id);
		if (user != null)
		{
			user.Name = editingUser.Name;
			user.Surname = editingUser.Surname;
			user.Email = editingUser.Email;
			user.Phone = editingUser.Phone;
			user.Weight = editingUser.Weight;
			user.Age = editingUser.Age;

			ClientRepo.Update(user);

			// Refresh the user list
			Users = ClientRepo.GetAll().ToArray();
			UpdateFilteredUsers(string.Empty);
			editingUser = null;
		}
	}
}

