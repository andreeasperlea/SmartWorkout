@page "/workout"
@using SmartWorkout.DataAccess
@using SmartWorkout.DataAccess.Entities
@using SmartWorkout.DataAccess.IRepository
@inject IGenericRepository<Client> ClientRepo;
<h3 class="mb-5">Start Your Workout:</h3>

<EditForm FormName="Add Workout" OnValidSubmit="SubmitFormWorkout" Model="newWorkout" class="">
	<label for="clients" class="col-sm-2 col-form-label">
		Choose a Client:
	</label>
	<InputSelect id="Client" @bind-Value="newWorkout.ClientId">
		@foreach (Client c in Clients)
		{
			<option value="@c.Id">@c.Name @c.Surname</option>
		}
	</InputSelect>
		
	
	@*<div class="form-group mb-3">
		<label for="duration">Duration</label>
		<InputNumber @bind-Value="@newWorkout.Duration"></InputNumber>
	</div>*@
	<div class="form-group mb-3">
		<label for="date">Date</label>
		<InputDate @bind-Value="@newWorkout.Date"></InputDate>
	</div>
	<button type="submit" class="btn btn-primary">Submit</button>
	@if (savedWorkout)
	{
		<p>Workout created.Please add your exercises: </p>
	}
	@if (errorWorkout)
	{
		<p>Something went wrong, please try again.</p>
	}
</EditForm>

@if (savedWorkout)
{
	<button onclick="createForm">Add Exercise</button>
	@if (IsFormVisible)
	{
		<EditForm FormName="Add	Exercise" OnValidSubmit="SubmitFormExercise" Model="newExercise" class="">
			<DataAnnotationsValidator />
			<div class="form-group mb-3">
				<label for="first-name">Exercise Name</label>
				<InputText @bind-Value="@newExercise.Name"></InputText>
				<ValidationMessage For="@(() => newExercise.Name)" />
			</div>
			<button type="submit" class="btn btn-primary">Submit</button>

			@if (savedExercise)
			{
				<p>The Exercise has been created!We need some details about it: </p>
			}
			@if (errorExercise)
			{
				<p>Something went wrong, please try again.</p>
			}
		</EditForm>
	}

}

@if (savedExercise)
{
	<EditForm FormName="Add	ExerciseLog" OnValidSubmit="SubmitFormExerciseLog" Model="newExerciseLog" class="">
		<div class="form-group mb-3">
			<label for="first-name">Weights(leave empty if you didn't use any)</label>
			<InputNumber @bind-Value="@newExerciseLog.Weight"></InputNumber>
		</div>
		<div class="form-group mb-3">
			<label for="first-name">Sets</label>
			<InputNumber @bind-Value="@newExerciseLog.Sets"></InputNumber>
		</div>
		<div class="form-group mb-3">
			<label for="first-name">Duration(in minutes)</label>
			<InputNumber @bind-Value="@newExerciseLog.Duration"></InputNumber>
		</div>
		<div class="form-group mb-3">
			<label for="first-name">Distance in km(leave empty if it's not the case)</label>
			<InputNumber @bind-Value="@newExerciseLog.Distance"></InputNumber>
		</div>
		<button type="submit" class="btn btn-primary">Submit</button>
		@if (savedExerciseLog)
		{
			<p>Now we have all the details we need. </p>
		}
		@if (errorExerciseLog)
		{
			<p>Something went wrong, please try again.</p>
		}
	</EditForm>
}

@inject DataAccess.SmartWorkoutContext SmartWorkoutContext;


@code {
	List<Client> Clients = new();
	private DataAccess.Entities.Client[] Users;
	public SmartWorkout.DataAccess.Entities.Workout newWorkout = new SmartWorkout.DataAccess.Entities.Workout();
	public ExerciseLog newExerciseLog = new ExerciseLog();
	public Exercise newExercise = new Exercise();
	public bool savedExercise = false;
	public bool errorExercise = false;
	public bool savedExerciseLog=false;
	public bool errorExerciseLog = false;
	public bool savedWorkout = false;
	public bool errorWorkout = false;

	bool IsFormVisible = false;
	void createForm()
	{
		IsFormVisible = true;
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		Users = ClientRepo.GetAll().ToArray();
		Clients = Users.ToList();
	}

	private async Task SubmitFormExercise()
	{
		savedExercise= false;
		errorExercise = false;
		try
		{

			SmartWorkoutContext.Exercises.Add(newExercise);
			await SmartWorkoutContext.SaveChangesAsync();
			newExercise = new Exercise();
			savedExercise = true;
		}
		catch(Exception)
		{
			errorExercise = true;
			throw;
		}
	}
	private async Task SubmitFormExerciseLog()
	{
		savedExerciseLog = false;
		errorExerciseLog = false;
		try
		{
			newExerciseLog.WorkoutId = newWorkout.Id;
			newExerciseLog.ExerciseId = newExercise.Id;
			SmartWorkoutContext.ExerciseLogs.Add(newExerciseLog);
			await SmartWorkoutContext.SaveChangesAsync();
			newExerciseLog = new ExerciseLog();
			savedExerciseLog = true;
		}
		catch (Exception)
		{
			errorExerciseLog = true;
			throw;
		}
	}
	private async Task SubmitFormWorkout()
	{
		savedWorkout = false;
		errorWorkout = false;
		try
		{
			SmartWorkoutContext.Workouts.Add(newWorkout);
			await SmartWorkoutContext.SaveChangesAsync();
			newWorkout = new SmartWorkout.DataAccess.Entities.Workout();
			savedWorkout = true;
		}
		catch (Exception)
		{
			errorWorkout = true;
			throw;
		}
	}

}